import random
import logging
import subprocess
import sys
import os
import re
import time
import concurrent.futures
import discord
from discord.ext import commands, tasks
import docker
import asyncio
from discord import app_commands
from datetime import datetime

TOKEN = ''  # YOUR BOT TOKEN HERE
SERVER_LIMIT = 1
database_file = 'database.txt'
BANNER_URL = "https://media.discordapp.net/attachments/1358701388997070859/1358709346141343814/Picsart_25-04-07_13-18-52-202.jpg?ex=67f4d42f&is=67f382af&hm=2ff1a286e9fe86b580603949dea84c24ac3fe03e0862579b54e63f9b247e6de8&"

# Modern color scheme
COLOR_PRIMARY = 0x6A5ACD  # Slate Blue
COLOR_SUCCESS = 0x2ECC71  # Emerald Green
COLOR_ERROR = 0xE74C3C    # Alizarin Red
COLOR_WARNING = 0xF39C12  # Orange
COLOR_INFO = 0x3498DB     # Peter River Blue

intents = discord.Intents.default()
intents.messages = False
intents.message_content = False

bot = commands.Bot(command_prefix='/', intents=intents)
client = docker.from_env()

def add_to_database(user, container_name, ssh_command):
    with open(database_file, 'a') as f:
        f.write(f"{user}|{container_name}|{ssh_command}\n")

def remove_from_database(ssh_command):
    if not os.path.exists(database_file):
        return
    with open(database_file, 'r') as f:
        lines = f.readlines()
    with open(database_file, 'w') as f:
        for line in lines:
            if ssh_command not in line:
                f.write(line)

async def capture_ssh_session_line(process):
    while True:
        output = await process.stdout.readline()
        if not output:
            break
        output = output.decode('utf-8').strip()
        if "ssh session:" in output:
            return output.split("ssh session:")[1].strip()
    return None

def get_ssh_command_from_database(container_id):
    if not os.path.exists(database_file):
        return None
    with open(database_file, 'r') as f:
        for line in f:
            if container_id in line:
                return line.split('|')[2]
    return None

def get_user_servers(user):
    if not os.path.exists(database_file):
        return []
    servers = []
    with open(database_file, 'r') as f:
        for line in f:
            if line.startswith(user):
                servers.append(line.strip())
    return servers

def count_user_servers(user):
    return len(get_user_servers(user))

def get_container_id_from_database(user):
    servers = get_user_servers(user)
    if servers:
        return servers[0].split('|')[1]
    return None

def create_embed(title=None, description=None, color=COLOR_PRIMARY):
    embed = discord.Embed(
        title=f"**{title}**" if title else None,
        description=description,
        color=color,
        timestamp=datetime.utcnow()
    )
    embed.set_footer(text="VPS Manager ‚Ä¢ Premium Cloud Hosting", icon_url=bot.user.avatar.url)
    embed.set_image(url=BANNER_URL)
    return embed

@bot.event
async def on_ready():
    change_status.start()
    print(f'Bot is ready. Logged in as {bot.user}')
    await bot.tree.sync()

@tasks.loop(seconds=5)
async def change_status():
    try:
        instance_count = 0
        if os.path.exists(database_file):
            with open(database_file, 'r') as f:
                instance_count = len(f.readlines())
        status = f"üåê Managing {instance_count} VPS instances"
        await bot.change_presence(
            activity=discord.Activity(
                type=discord.ActivityType.watching,
                name=status
            ),
            status=discord.Status.online
        )
    except Exception as e:
        print(f"Failed to update status: {e}")

async def regen_ssh_command(interaction: discord.Interaction, container_name: str):
    user = str(interaction.user)
    container_id = get_container_id_from_database(user, container_name)

    if not container_id:
        embed = create_embed(
            title="‚ùå Access Denied",
            description="You don't have any active instances.",
            color=COLOR_ERROR
        )
        await interaction.response.send_message(embed=embed)
        return

    try:
        exec_cmd = await asyncio.create_subprocess_exec("docker", "exec", container_id, "tmate", "-F",
                                                      stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
    except subprocess.CalledProcessError as e:
        embed = create_embed(
            title="‚ùå Command Failed",
            description="Failed to generate SSH session.\n\n**Error:**\n```" + str(e) + "```",
            color=COLOR_ERROR
        )
        await interaction.response.send_message(embed=embed)
        return

    ssh_session_line = await capture_ssh_session_line(exec_cmd)
    if ssh_session_line:
        dm_embed = discord.Embed(
            title="üîê New SSH Credentials",
            description=f"Here's your new SSH access for your VPS:",
            color=COLOR_SUCCESS,
            timestamp=datetime.utcnow()
        )
        dm_embed.add_field(
            name="SSH Command",
            value=f"```{ssh_session_line}```",
            inline=False
        )
        dm_embed.add_field(
            name="Instance ID",
            value=f"`{container_id}`",
            inline=True
        )
        dm_embed.add_field(
            name="Expires",
            value="Never (Persistent Session)",
            inline=True
        )
        dm_embed.set_footer(text="Keep this information secure!")
        await interaction.user.send(embed=dm_embed)
        
        response_embed = create_embed(
            title="‚úÖ Credentials Generated",
            description="Check your DMs for new SSH access details.",
            color=COLOR_SUCCESS
        )
        await interaction.response.send_message(embed=response_embed)
    else:
        embed = create_embed(
            title="‚ùå Generation Failed",
            description="Failed to generate new SSH session.",
            color=COLOR_ERROR
        )
        await interaction.response.send_message(embed=embed)

async def start_server(interaction: discord.Interaction, container_name: str):
    user = str(interaction.user)
    container_id = get_container_id_from_database(user, container_name)

    if not container_id:
        embed = create_embed(
            title="‚ùå Instance Not Found",
            description="You don't have any instances to start.",
            color=COLOR_ERROR
        )
        await interaction.response.send_message(embed=embed)
        return

    try:
        subprocess.run(["docker", "start", container_id], check=True)
        exec_cmd = await asyncio.create_subprocess_exec("docker", "exec", container_id, "tmate", "-F",
                                                      stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
        ssh_session_line = await capture_ssh_session_line(exec_cmd)
        if ssh_session_line:
            dm_embed = discord.Embed(
                title="üöÄ Instance Started",
                description="Your VPS is now online and ready!",
                color=COLOR_SUCCESS,
                timestamp=datetime.utcnow()
            )
            dm_embed.add_field(
                name="SSH Access",
                value=f"```{ssh_session_line}```",
                inline=False
            )
            dm_embed.add_field(
                name="Resources",
                value="2 vCPU | 6GB RAM | 50GB SSD",
                inline=True
            )
            dm_embed.add_field(
                name="Status",
                value="üü¢ Online",
                inline=True
            )
            dm_embed.set_footer(text="VPS Manager")
            await interaction.user.send(embed=dm_embed)
            
            response_embed = create_embed(
                title="‚úÖ Instance Online",
                description="Your VPS has been started successfully. SSH details sent to your DMs.",
                color=COLOR_SUCCESS
            )
            await interaction.response.send_message(embed=response_embed)
        else:
            embed = create_embed(
                title="‚ö†Ô∏è Partial Success",
                description="Instance started but SSH session couldn't be established.",
                color=COLOR_WARNING
            )
            await interaction.response.send_message(embed=embed)
    except subprocess.CalledProcessError as e:
        embed = create_embed(
            title="‚ùå Startup Failed",
            description=f"Failed to start instance:\n```{e}```",
            color=COLOR_ERROR
        )
        await interaction.response.send_message(embed=embed)

async def stop_server(interaction: discord.Interaction, container_name: str):
    user = str(interaction.user)
    container_id = get_container_id_from_database(user, container_name)

    if not container_id:
        embed = create_embed(
            title="‚ùå Instance Not Found",
            description="You don't have any instances to stop.",
            color=COLOR_ERROR
        )
        await interaction.response.send_message(embed=embed)
        return

    try:
        subprocess.run(["docker", "stop", container_id], check=True)
        embed = create_embed(
            title="‚èπÔ∏è Instance Stopped",
            description="Your VPS has been successfully shut down.",
            color=COLOR_SUCCESS
        )
        await interaction.response.send_message(embed=embed)
    except subprocess.CalledProcessError as e:
        embed = create_embed(
            title="‚ùå Shutdown Failed",
            description=f"Failed to stop instance:\n```{e}```",
            color=COLOR_ERROR
        )
        await interaction.response.send_message(embed=embed)

async def restart_server(interaction: discord.Interaction, container_name: str):
    user = str(interaction.user)
    container_id = get_container_id_from_database(user, container_name)

    if not container_id:
        embed = create_embed(
            title="‚ùå Instance Not Found",
            description="You don't have any instances to restart.",
            color=COLOR_ERROR
        )
        await interaction.response.send_message(embed=embed)
        return

    try:
        subprocess.run(["docker", "restart", container_id], check=True)
        exec_cmd = await asyncio.create_subprocess_exec("docker", "exec", container_id, "tmate", "-F",
                                                      stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
        ssh_session_line = await capture_ssh_session_line(exec_cmd)
        if ssh_session_line:
            dm_embed = discord.Embed(
                title="üîÑ Instance Restarted",
                description="Your VPS has been successfully rebooted!",
                color=COLOR_SUCCESS,
                timestamp=datetime.utcnow()
            )
            dm_embed.add_field(
                name="SSH Access",
                value=f"```{ssh_session_line}```",
                inline=False
            )
            dm_embed.add_field(
                name="Uptime",
                value="Just restarted",
                inline=True
            )
            dm_embed.add_field(
                name="Status",
                value="üü¢ Online",
                inline=True
            )
            dm_embed.set_footer(text="VPS Manager")
            await interaction.user.send(embed=dm_embed)
            
            response_embed = create_embed(
                title="‚úÖ Restart Complete",
                description="Your VPS has been restarted. SSH details sent to your DMs.",
                color=COLOR_SUCCESS
            )
            await interaction.response.send_message(embed=response_embed)
        else:
            embed = create_embed(
                title="‚ö†Ô∏è Partial Success",
                description="Instance restarted but SSH session couldn't be established.",
                color=COLOR_WARNING
            )
            await interaction.response.send_message(embed=embed)
    except subprocess.CalledProcessError as e:
        embed = create_embed(
            title="‚ùå Restart Failed",
            description=f"Failed to restart instance:\n```{e}```",
            color=COLOR_ERROR
        )
        await interaction.response.send_message(embed=embed)

def get_container_id_from_database(user, container_name):
    if not os.path.exists(database_file):
        return None
    with open(database_file, 'r') as f:
        for line in f:
            if line.startswith(user) and container_name in line:
                return line.split('|')[1]
    return None

async def create_server_task(interaction):
    embed = create_embed(
        title="üöÄ Provisioning VPS",
        description="Initializing your new cloud instance...",
        color=COLOR_INFO
    )
    await interaction.response.send_message(embed=embed)
    
    user = str(interaction.user)
    if count_user_servers(user) >= SERVER_LIMIT:
        embed = create_embed(
            title="‚ùå Limit Reached",
            description="You've reached your maximum allowed instances.",
            color=COLOR_ERROR
        )
        await interaction.followup.send(embed=embed)
        return

    image = "ubuntu-22.04-with-tmate"
    
    try:
        container_id = subprocess.check_output([
            "docker", "run", "-itd", image
        ]).strip().decode('utf-8')
    except subprocess.CalledProcessError as e:
        embed = create_embed(
            title="‚ùå Deployment Failed",
            description="Failed to create your VPS instance.",
            color=COLOR_ERROR
        )
        await interaction.followup.send(embed=embed)
        return

    try:
        exec_cmd = await asyncio.create_subprocess_exec("docker", "exec", container_id, "tmate", "-F",
                                                      stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
    except subprocess.CalledProcessError as e:
        embed = create_embed(
            title="‚ùå Configuration Error",
            description="Failed to configure SSH access.",
            color=COLOR_ERROR
        )
        await interaction.followup.send(embed=embed)
        subprocess.run(["docker", "kill", container_id])
        subprocess.run(["docker", "rm", container_id])
        return

    ssh_session_line = await capture_ssh_session_line(exec_cmd)
    if ssh_session_line:
        dm_embed = discord.Embed(
            title="üéâ VPS Ready!",
            description="Your new cloud instance is now available!",
            color=COLOR_SUCCESS,
            timestamp=datetime.utcnow()
        )
        dm_embed.add_field(
            name="SSH Access",
            value=f"```{ssh_session_line}```",
            inline=False
        )
        dm_embed.add_field(
            name="Specifications",
            value="2 vCPU | 6GB RAM | 50GB SSD",
            inline=False
        )
        dm_embed.add_field(
            name="Operating System",
            value="Ubuntu 22.04 LTS",
            inline=True
        )
        dm_embed.add_field(
            name="Status",
            value="üü¢ Online",
            inline=True
        )
        dm_embed.set_footer(text="VPS Manager | Enjoy your cloud instance!")
        await interaction.user.send(embed=dm_embed)
        
        success_embed = create_embed(
            title="‚úÖ Deployment Complete",
            description="Your VPS is ready! Check your DMs for connection details.",
            color=COLOR_SUCCESS
        )
        await interaction.followup.send(embed=success_embed)
        
        add_to_database(user, container_id, ssh_session_line)
    else:
        embed = create_embed(
            title="‚ö†Ô∏è Deployment Issue",
            description="Instance created but SSH setup failed. Please contact support.",
            color=COLOR_WARNING
        )
        await interaction.followup.send(embed=embed)
        subprocess.run(["docker", "kill", container_id])
        subprocess.run(["docker", "rm", container_id])

@bot.tree.command(name="deploy", description="Creates a new VPS instance")
async def deploy_ubuntu(interaction: discord.Interaction):
    await create_server_task(interaction)

@bot.tree.command(name="regen-ssh", description="Generates new SSH credentials")
@app_commands.describe(container_name="Your instance ID or SSH command")
async def regen_ssh(interaction: discord.Interaction, container_name: str):
    await regen_ssh_command(interaction, container_name)

@bot.tree.command(name="start", description="Starts your VPS instance")
@app_commands.describe(container_name="Your instance ID or SSH command")
async def start(interaction: discord.Interaction, container_name: str):
    await start_server(interaction, container_name)

@bot.tree.command(name="stop", description="Stops your VPS instance")
@app_commands.describe(container_name="Your instance ID or SSH command")
async def stop(interaction: discord.Interaction, container_name: str):
    await stop_server(interaction, container_name)

@bot.tree.command(name="restart", description="Restarts your VPS instance")
@app_commands.describe(container_name="Your instance ID or SSH command")
async def restart(interaction: discord.Interaction, container_name: str):
    await restart_server(interaction, container_name)

@bot.tree.command(name="ping", description="Checks bot responsiveness")
async def ping(interaction: discord.Interaction):
    latency = round(bot.latency * 1000)
    
    if latency < 100:
        color = COLOR_SUCCESS
        status = "‚ö° Excellent"
    elif latency < 200:
        color = COLOR_INFO
        status = "‚úÖ Good"
    elif latency < 300:
        color = COLOR_WARNING
        status = "‚ö†Ô∏è Fair"
    else:
        color = COLOR_ERROR
        status = "‚ùå Poor"
    
    embed = create_embed(
        title="üì∂ Connection Test",
        description=f"**Response Time:** {latency}ms\n**Quality:** {status}",
        color=color
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="list", description="Lists your VPS instances")
async def list_servers(interaction: discord.Interaction):
    user = str(interaction.user)
    servers = get_user_servers(user)
    if servers:
        embed = create_embed(
            title="üìã Your Cloud Instances",
            color=COLOR_INFO
        )
        for server in servers:
            _, container_id, ssh_cmd = server.split('|')
            embed.add_field(
                name=f"Instance: `{container_id[:12]}`",
                value=f"**Status:** Online\n**SSH:** `{ssh_cmd[:25]}...`",
                inline=False
            )
        await interaction.response.send_message(embed=embed)
    else:
        embed = create_embed(
            title="üìã Your Cloud Instances",
            description="You don't have any active VPS instances.",
            color=COLOR_INFO
        )
        await interaction.response.send_message(embed=embed)

@bot.tree.command(name="remove", description="Deletes a VPS instance")
@app_commands.describe(container_name="Your instance ID or SSH command")
async def remove_server(interaction: discord.Interaction, container_name: str):
    user = str(interaction.user)
    container_id = get_container_id_from_database(user, container_name)

    if not container_id:
        embed = create_embed(
            title="‚ùå Not Found",
            description="No matching instance found.",
            color=COLOR_ERROR
        )
        await interaction.response.send_message(embed=embed)
        return

    try:
        subprocess.run(["docker", "stop", container_id], check=True)
        subprocess.run(["docker", "rm", container_id], check=True)
        
        remove_from_database(container_id)
        
        embed = create_embed(
            title="üóëÔ∏è Instance Deleted",
            description=f"VPS `{container_id[:12]}...` has been permanently removed.",
            color=COLOR_SUCCESS
        )
        await interaction.response.send_message(embed=embed)
    except subprocess.CalledProcessError as e:
        embed = create_embed(
            title="‚ùå Deletion Failed",
            description=f"Failed to remove instance:\n```{e}```",
            color=COLOR_ERROR
        )
        await interaction.response.send_message(embed=embed)

@bot.tree.command(name="help", description="Shows command information")
async def help_command(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üìö VPS Manager Help Center",
        description="Manage your cloud instances with these commands:",
        color=COLOR_PRIMARY,
        timestamp=datetime.utcnow()
    )
    
    embed.add_field(
        name="üöÄ Instance Management",
        value="‚ñ∏ `/deploy` - Create new VPS\n"
              "‚ñ∏ `/start <id>` - Start instance\n"
              "‚ñ∏ `/stop <id>` - Stop instance\n"
              "‚ñ∏ `/restart <id>` - Reboot instance\n"
              "‚ñ∏ `/remove <id>` - Delete instance\n"
              "‚ñ∏ `/regen-ssh <id>` - New SSH credentials",
        inline=False
    )
    
    embed.add_field(
        name="‚ÑπÔ∏è Information",
        value="‚ñ∏ `/list` - Your instances\n"
              "‚ñ∏ `/ping` - Check bot status\n"
              "‚ñ∏ `/help` - This message",
        inline=False
    )
    
    embed.add_field(
        name="üîí Security Note",
        value="All SSH credentials are sent via DM for security.",
        inline=False
    )
    
    embed.set_footer(text="VPS Manager | Premium Cloud Solutions")
    await interaction.response.send_message(embed=embed)

bot.run(TOKEN)
